package com.nitya.rest.propertyservice.service;

import java.net.URI;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.nitya.rest.propertyservice.entity.Property;
import com.nitya.rest.propertyservice.exception.PropertyNotFoundException;
import com.nitya.rest.propertyservice.repository.PropertyRepository;

@Service
public class PropertyServiceImpl implements PropertyService {
	
	@Autowired
	private PropertyRepository propertyRepo;
	
	@Override
	public List<Property> findAllPropertyDetails() {
		List<Property> propertyList = propertyRepo.findAll();
		if(propertyList.isEmpty()) {
			throw new PropertyNotFoundException("");
		}
		return propertyList;
	}
	
	@Override
	public List<Property> findPropertyDetailsByUserId(Integer userId) {
		List<Property> propertyDetails = propertyRepo.findAllByUserId(userId);
		
		if(propertyDetails.isEmpty()){
			throw new PropertyNotFoundException("for User Id: " + userId);
		}
		return propertyDetails;
	}
	
	@Override
	public void deleteAllPropertiesByUserId(Integer userId) {
		List<Property> propertyDetails = propertyRepo.findAllByUserId(userId);
		
		if(propertyDetails.isEmpty()){
			throw new PropertyNotFoundException("for User Id: " + userId);
		}
		propertyRepo.deleteAllByUserId(userId);
	}
	
	@Override
	public ResponseEntity<Property> registerProperty(Integer userId, Property property) {
		property.setUserId(userId);
		Property savedProperty = propertyRepo.save(property);
		URI location = ServletUriComponentsBuilder.fromCurrentContextPath().path("/{id}")
				.buildAndExpand(savedProperty.getId()).toUri();
		return ResponseEntity.created(location).build();
	}

	@Override
	public void deletePropertyById(Integer userId, Integer propertyId) {
List<Property> propertyDetails = propertyRepo.findAllByUserId(userId);
		
		if(propertyDetails.isEmpty()){
			throw new PropertyNotFoundException("for User Id: " + userId);
		}
		
		propertyRepo.deleteById(propertyId);
	}
}
